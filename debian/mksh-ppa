#!/bin/mksh
# © mirabilos Ⓕ MirBSD

unset LANGUAGE
export LC_ALL=C.UTF-8

function die {
	print -ru2 -- "E: $@"
	exit 1
}

lpbase="https://launchpad.net/"
ppabase="${lpbase}~mirabilos/+archive/ubuntu/ppa/"
function tourl {
	if [[ $1 = http?(s)://* ]]; then
		REPLY=$1
	elif [[ $1 = /* ]]; then
		REPLY=$lpbase${1##+(/)}
	else
		REPLY=${ppabase}$1
	fi
}

T=$(mktemp -d /tmp/mksh-status.XXXXXXXXXX) || die cannot create temporary directory

rv=0
(
set -e
set -o pipefail
cd "$T"

lynx -source "${ppabase}+packages?field.name_filter=mksh&field.status_filter=published" | \
    tee s.htm | \
    xmlstarlet fo -e UTF-8 -H -R - | \
    sed --posix 's!<html xmlns="http://www.w3.org/1999/xhtml"!<html!' \
    >s.xml

<s.xml >s.lst xmlstarlet sel -T -B -E UTF-8 -t \
    -m '//tr[contains(@class, "archive_package_row") and contains("|Trusty|Xenial|Bionic|Focal|Jammy|", concat("|", td[5], "|"))]' \
    -v 'td[5]' -o '' -v 'td[1]/a/@href' -o '' -b

set -A archs
set -A logs
narchs=0

nd=0
while IFS='' read -r -d '' dist durl; do
	let ++nd
	case $dist {
	(Trusty) dist=t ;;
	(Xenial) dist=x ;;
	(Bionic) dist=zb ;;
	(Focal) dist=zf ;;
	(Jammy) dist=zj ;;
	}
	durl=${|tourl "$durl";}
	lynx -source ${|tourl "$durl";} | \
	    tee d$nd.htm | \
	    (echo '<main>'; cat; echo '</main>') | \
	    xmlstarlet fo -e UTF-8 -R - >d$nd.xml
	<d$nd.xml >d$nd.lst xmlstarlet sel -T -B -E UTF-8 -t \
	    -m '//li/img[@src="/@@/build-success"]/../a' \
	    -v . -o '' -v @href -o '' -b
	na=0
	while IFS='' read -r -d '' arch aurl; do
		let ++na
		lynx -source ${|tourl "$aurl";} | \
		    tee a$nd-$na.htm | \
		    xmlstarlet fo -e UTF-8 -H -R - | \
		    sed --posix 's!<html xmlns="http://www.w3.org/1999/xhtml"!<html!' \
		    >a$nd-$na.xml
		<a$nd-$na.xml >a$nd-$na.lst xmlstarlet sel -T -B -E UTF-8 -t \
		    -v '//li/a[text()="buildlog"]/@href'
		curl -L "${|tourl "$(<a$nd-$na.lst)";}" | gzip -d >a$nd-$na.log
		archs[narchs]=$dist-$arch
		logs[narchs]=a$nd-$na.log
		let ++narchs
	done <d$nd.lst
done <s.lst

cat >columnus <<-'EOF'
	arch)prog)system)klibc)musl)dietlibc)glibc
EOF

i=-1
while (( ++i < narchs )); do
	if [[ -z ${logs[i]} || ! -s ${logs[i]} ]]; then
		cat >>columnus <<-EOF
			${archs[i]})-)⁉ missing)⁉ missing)⁉ missing)⁉ missing)⁉ absent
		EOF
		continue
	fi
	fn=${logs[i]}

	llc=$(sed --posix -n \
	    -e '/^D:loglibc:start(\([^)]*\)) \(.*\) initialising$/s//vs=v\1 \2/p' \
	    -e '/^D:loglibc:final(\([^)]*\)) \(.*\) finishing$/s//vt=v\1 \2/p' \
	    "$fn" | sed --posix 's/ \([a-z][a-z0-9_]*=\)/\nvv\1/g' | sed --posix \
	    -e 's!_(\([0-9]*\)_unexpected)f!f/\1u!' \
	    -e 's/RTCHK/rtchk/g' -e 's/MTEST/mtest/g' \
	    -e 's/testsuite-failed/fail/g' \
	    -e 's/passed-but-notty/ntty/g' \
	    -e 's/succeeded-tested/succ/g' \
	    -e 's/_([^) ]*)//' \
	    -e "s/'/'\\\\''/g" -e 's/=\(.*\)$/='\''\1'\''/')
	case $nl$llc in (*"${nl}vs="*"${nl}vs="*)
		echo >&2 "W: multiple loglibc:start lines; log is fishy: $fn" ;;
	esac
	case $nl$llc in (*"${nl}vt="*"${nl}vt="*)
		echo >&2 "W: multiple loglibc:final lines; log is fishy: $fn" ;;
	esac
	vs= vt= vvarch= vvbred= vvsystem=
	vvmksh_klibc= vvmksh_musl= vvmksh_dietlibc= vvmksh_glibc=
	vvlksh_klibc= vvlksh_musl= vvlksh_dietlibc= vvlksh_glibc=
	eval "$llc"
	if test -z "$vs"; then
		vs=$vt vvarch= vvbred=
	fi
	if test -z "$vt"; then
		vt=$vs vvsystem=
		vvmksh_klibc= vvmksh_musl= vvmksh_dietlibc= vvmksh_glibc=
		vvlksh_klibc= vvlksh_musl= vvlksh_dietlibc= vvlksh_glibc=
	fi
	case x$vvbred in
	x|x0)
		bred=↑
		;;
	x1)
		bred=⇑
		;;
	*)
		echo >&2 "W: invalid bred ($vvbred); log is fishy: $fn"
		bred=⇓
		;;
	esac
	test x"$vs" = x"$vt" || echo >&2 "W: version difference" \
	    "($vs) vs. ($vt); log is fishy: $fn"
	vsn=${vs#v}

	case $vsn:${states[i]} {
	(:Build-Attempted|:Failed)
		vsn=$(sed --posix -n '/^Version: /{s///p;q;}' <"$fn")
		vsn=⸘${vsn:-'¿?'}
		vvmksh_glibc=⸘${states[i]}${vvmksh_glibc:+ $vvmksh_glibc}
		;;
	(*)
		vsn='('${vsn:-¿?}
	}
	cat >>columnus <<-EOF
		${archs[i]})mksh)${vvsystem:-⁉ unset})${vvmksh_klibc:-⁉ unset})${vvmksh_musl:-⁉ unset})${vvmksh_dietlibc:-⁉ unset})${vvmksh_glibc:-⁉ unset}
		${vvarch:+}${vvarch:- })lksh) $bred $vsn)${vvlksh_klibc:-⁉ unset})${vvlksh_musl:-⁉ unset})${vvlksh_dietlibc:-⁉ unset})${vvlksh_glibc:-⁉ unset}
	EOF
done

column -ts')' <columnus >tabularis
ed -s tabularis <<-\EOF
	,g/✓[^ ]*/s//[0;1;30;40m&/g
	,g/✓ ntty[^ ]*/s//[0;32;40m&/g
	,g/？[^ ]*/s//[0;33;40m&/g
	,g/⁉[^ ]*/s//[0;1;33;40m&/g
	,g/⁇[^ ]*/s//[0;35;40m&/g
	,g/⁐[^ ]*/s//[0;36;40m&/g
	,g/✘[^ ]*/s//[0;1;31;40m&/g
	,g/✗[^ ]*/s//[0;31;40m&/g
	,g/☒[^ ]*/s//[0;1;35;40m&/g
	,g/✔[^ ]*/s//[0;1;32;40m&/g
	,g/ ↑\([^(]*\)(\([^ ]*\) /s//[0;1;30;40m ↑\1v[0;1m\2 /
	,g/ ↑\(.*\)⸘\([^ ]*\) /s//[0;36;40m ↑\1v[1m\2 /
	,g/ ⇑\([^(]*\)(\([^ ]*\) /s//[0;1;30;40m ↑\1v[0;31;1m\2 /
	,g/ ⇑\(.*\)⸘\([^ ]*\) /s//[0;36;40m ↑\1v[31;1m\2 /
	,g/ ⇓\([^(]*\)(\([^ ]*\) /s//[0;1;30;40m ↑\1v[0;5;1m\2 /
	,g/ ⇓\(.*\)⸘\([^ ]*\) /s//[0;36;40m ↑\1v[5;1m\2 /
	,g/⸘/s//[0;1;36;40m/g
	1s/^/[0m/
	1s/  */&| /g
	1s/$/   /
	2,$g/^[^ ]/s//[0;1;34;40m&/
	2,$g/  */s//[0m&| /g
	,g/ |/s//|/g
	1t$
	2,$g/^[^m]*m[^ ]/.-1s/.0/&;4/g
	,g/^/s//[0;4m/
	,g/$/s//[0m/
	w
	q
EOF

echo
cat tabularis
print -nr -- "[0;1;30;40m⇐ $PWD ⇒ press Return to continue…[0m"
read

) || rv=1
cd /
rm -rf "$T"
exit $rv
