#!/bin/mksh

unset LANGUAGE
export LC_ALL=C.UTF-8

function die {
	print -ru2 -- "E: $@"
	exit 1
}

T=$(mktemp -d /tmp/mksh-status.XXXXXXXXXX) || die cannot create temporary directory

rv=0
(
set -e
set -o pipefail
cd "$T"

lynx -source https://buildd.debian.org/status/package.php?p=mksh | \
    tee s.htm | \
    HTML_TIDY=/dev/null tidy -asxhtml -utf8 --newline LF --output-bom no \
    --drop-empty-elements no --drop-empty-paras no --quote-nbsp no --wrap 0 | \
    xmlstarlet fo -e UTF-8 - | \
    sed --posix 's!<html xmlns="http://www.w3.org/1999/xhtml"!<html!' \
    >s.xml

<s.xml >s.lst xmlstarlet sel -T -B -E UTF-8 -t \
    --var linebreak -n --break \
    -m '//table[@class="data"]' \
     -m './tr' \
      -i 'position() > 2' \
	-o 'A: <' \
	-v 'translate(./td[1], $linebreak, " ")' \
	-o '> <' \
	-v 'translate(./td[3]/a/@href, $linebreak, " ")' \
	-o '> :L' -n \
      -b \
     -b \
    -b

set -A archs
narchs=0
set -A logs

while IFS=' ' read -r a arch log l; do
	[[ $a = A: ]] || die "arch $((narchs+1)) beginning broken: ${a@Q} ($arch)"
	[[ $l = :L ]] || die "arch $((narchs+1)) ending broken: ${l@Q} ($arch)"
	[[ $arch = '<'+([0-9a-z-])'>' ]] || die "arch $((narchs+1)) arch broken: ${arch@Q}"
	arch=${arch#'<'}
	arch=${arch%'>'}
	if [[ $log = '<>' ]]; then
		log=
	elif [[ $log != '<fetch.php?'*'>' ]]; then
		die "arch $((narchs+1)) log broken: ${log@Q} ($arch)"
	else
		log=https://buildd.debian.org/status/${log#'<'}
		log=${log%'>'}
	fi
	case $arch in
	(hurd-i386) arch=hurd ;;
	(hurd*) die "another hurd* found: ${arch@Q}" ;;
	(kfreebsd-i386) arch=k-i386 ;;
	(kfreebsd-amd64) arch=k-amd64 ;;
	(k-*|kfreebsd*) die "another k(freebsd)* found: ${arch@Q}" ;;
	esac
	[[ -n $log ]] && logs[narchs]=$log
	archs[narchs++]=$arch
	# debugging
	:||if [[ $arch = alpha ]]; then
		archs[narchs++]=avr32
	fi
done <s.lst

print -ru2 -- "I: found $narchs architectures, ${#logs[*]} with logs"
print -ru2 -- N: "${archs[@]}"

i=-1
while (( ++i < narchs )); do
	[[ -n ${logs[i]} ]] || continue
	wget --quiet --show-progress -O arch."${archs[i]}" "${logs[i]}&raw=1"
done

cat >columnus <<-'EOF'
	arch)prog)system)klibc)musl)dietlibc)glibc
EOF

i=-1
while (( ++i < narchs )); do
	if [[ -n ${logs[i]} ]]; then (
		llc=$(sed --posix -n \
		    '/^D:loglibc:final(\([^)]*\)) \(.*\) finishing$/{s//\1)\2/p;q;}' \
		    <arch."${archs[i]}")
		vsn=${llc%%')'*}
		eval "$(sed --posix \
		    -e 's/_(\([0-9]*\)_\([^) ]\)[^) ]*)\([a-z]\)/\3\/\1\2/g' \
		    -e 's/RTCHK/rtchk/g' -e 's/MTEST/mtest/g' \
		    -e 's/testsuite-failed/fail/g' \
		    -e 's/passed-but-notty/ntty/g' \
		    -e 's/succeeded-tested/succ/g' \
		    <<-EOF
			${llc#*')'}
		EOF
		)"
		cat >>columnus <<-EOF
			${archs[i]})mksh)$system)$mksh_klibc)$mksh_musl)$mksh_dietlibc)$mksh_glibc
			 )lksh) ↑ version($vsn)$lksh_klibc)$lksh_musl)$lksh_dietlibc)$lksh_glibc
		EOF
	); else
		cat >>columnus <<-EOF
			${archs[i]})-)⁉ missing)⁉ missing)⁉ missing)⁉ missing)⁉ absent
		EOF
	fi
done

column -ts')' <columnus >tabularis
ed -s tabularis <<-\EOF
	,g/✓[^ ]*/s//[0;1;30;40m&/g
	,g/？[^ ]*/s//[0;33;40m&/g
	,g/⁉[^ ]*/s//[0;1;33;40m&/g
	,g/⁇[^ ]*/s//[0;35,40m&/g
	,g/✘[^ ]*/s//[0;1;31;40m&/g
	,g/✗[^ ]*/s//[0;31;40m&/g
	,g/☒[^ ]*/s//[0;1;35;40m&/g
	,g/✔[^ ]*/s//[0;1;32;40m&/g
	,g/\( ↑[^(]*\)(\([^ ]*\) /s//[0;1;30;40m\1 [0;1m\2 /
	1s/^/[0m/
	1s/  */&| /g
	1s/$/   /
	2,$s/^[^ ]/[0;1;34;40m&/
	2,$s/  */[0m&| /g
	,g/ |/s//|/g
	1t$
	2,$g/^[^m]*m[^ ]/.-1s/.0/&;4/g
	,g/$/s//[0m/
	w
	q
EOF

echo
cat tabularis
print -nr -- "[0;1;30;40m⇐ $PWD ⇒ press Return to continue…[0m"
read

) || rv=1
cd /
rm -rf "$T"
exit $rv
